// Пояснения
CGTU_Init(portGate, portTek, channelMeasure, channelSync);
GTU_All(Num, Pause);
GTU_PulseVd(Voltage); //  in mV
GTU_PulseId(Current); //  in mA
GTU_PulseVg(Voltage); //  in mV
GTU_PulseIg(Current); //  in mA

// Посмотреть версию прошивки
include("PrintStatus.js");
PrintFWInfo();

// Обновление прошивки
include("FWUpdate.js");
FWU_GTU();

// Скачать дамп регистров
include("FWUpdate.js");
FWU_DumpGTU();

// Загрузить дамп регистров
include("FWUpdate.js");
FWU_RestoreGTU();

// Подготовка блока
dev.co(7);
dev.nid(3);

// Измерение
GTU_All(1,1);
GTU_Kelvin();
GTU_Gate();
GTU_Res();
GTU_Holding();
GTU_Latching();

GTU_PulseVd(2000);
GTU_PulseId(50);
GTU_PulseVg(100);
GTU_PulseIg(10);

Data_Vg = dev.rafs(1)
Data_Ig = dev.rafs(2)
Data_Vd = dev.rafs(3)
Data_Id = dev.rafs(4)

Control_Vg = dev.rafs(5)
Control_Ig = dev.rafs(6)
Control_Vd = dev.rafs(7)
Control_Id = dev.rafs(8)

Target_Vg = dev.rafs(9)
Target_Ig = dev.rafs(10)
Target_Vd = dev.rafs(11)
Target_Id = dev.rafs(12)

save('Data_Vg.csv', Data_Vg)
save('Data_Ig.csv', Data_Ig)
save('Data_Vd.csv', Data_Vd)
save('Data_Id.csv', Data_Id)

save('Control_Vg.csv', Control_Vg)
save('Control_Ig.csv', Control_Ig)
save('Control_Vd.csv', Control_Vd)
save('Control_Id.csv', Control_Id)

save('Target_Vg.csv', Target_Vg)
save('Target_Ig.csv', Target_Ig)
save('Target_Vd.csv', Target_Vd)
save('Target_Id.csv', Target_Id)



// Ресурсный тест
include("TestGTU_4.0.js");
GTU_ResourceTest(3000);

/// Igt 10 - 49мА
// Регистры измерения ADC
/ (Offset: 119) (K: 118)
/ [P0: 117] [P1: 116] [P2: 115]
// Регистры задания DAC
/ (Offset: 109) (K: 108)
/ [P0: 107] [P1: 106] [P2: 105]
include("CalGTU_4.0.js");
cgtu_Res = 19.76;
cgtu_Imax = 100;
cgtu_Imin = 10;
cgtu_Points = 10;
cgtu_RangeIgt = 0;
cgtu_Iterations = 3;
cgtu_UseAvg = 1;
CGTU_Init(12,14,1,3);
dev.nid(3)
CGTU_VerifyIGate();

CGTU_CalibrateIGate();


/// Igt 50 - 1000мА
// Регистры измерения ADC
/ (Offset: 37) (K: 36)
/ [P0: 35] [P1: 34] [P2: 33]
// Регистры задания DAC
/ (Offset: 51) (K: 50)
/ [P0: 49] [P1: 48] [P2: 47]
include("CalGTU_4.0.js");
cgtu_Res = 10;
cgtu_Imax = 1000;
cgtu_Imin = 50;
cgtu_Iterations = 3;
cgtu_Points = 10;
cgtu_RangeIgt = 1;
cgtu_UseAvg = 0;
CGTU_Init(8,6,1,3);
dev.nid(3)
CGTU_VerifyIGate();

CGTU_CalibrateIGate();


/// Vgt 0.1 - 5В
// Регистры измерения ADC
/ (Offset: 32) (K: 31)
/ [P0: 30] [P1: 29] [P2: 28]
// Регистры задания DAC
/ (Offset: 46) (K: 45)
/ [P0: -] [P1: -] [P2: -]
include("CalGTU_4.0.js");
cgtu_Vmax = 4500;
cgtu_Vmin = 100;
cgtu_Points = 10;
cgtu_Iterations = 1;
cgtu_UseAvg = 0;
CGTU_Init(11,12,1,3);
dev.nid(3)
CGTU_VerifyVGate();

CGTU_CalibrateVGate();


/// Id 50 - 1000мА
// Регистры измерения ADC
/ (Offset: 27) (K: 26)
/ [P0: 25] [P1: 24] [P2: 23]
// Регистры задания DAC
/ (Offset: 44) (K: 43)
/ [P0: 42] [P1: 41] [P2: 40]
include("CalGTU_4.0.js");
cgtu_Res = 10;
cgtu_Imax = 700;
cgtu_Imin = 30;
cgtu_Points = 10;
cgtu_Iterations = 3;
cgtu_UseAvg = 0;
CGTU_Init(8,6,1,3);
dev.nid(3)
CGTU_VerifyIPower();

CGTU_CalibrateIPower();


/// Vd 2 - 12В
// Регистры измерения ADC
/ (Offset: 22) (K: 21)
/ [P0: 20] [P1: 19] [P2: 18]
// Регистры задания DAC
/ (Offset: 39) (K: 38)
/ [P0: -] [P1: -] [P2: -]
include("CalGTU_4.0.js");
cgtu_Vmax = 12000;
cgtu_Vmin = 2000;
cgtu_Points = 10;
cgtu_Iterations = 3;
cgtu_UseAvg = 0;
CGTU_Init(8,6,1,3);
dev.nid(3)
CGTU_VerifyVPower();

CGTU_CalibrateVPower();


/// DMM6500 - шаблон, нет функционала
include("CalGTU_4.0.js");
clsl_measuring_device = "DMM6000";
clsl_V_PulsePlate 	= 40000 			// in us
clsl_V_TriggerDelay	= 0				// in s
cgtu_Vmax = 4500;
cgtu_Vmin = 100;
cgtu_Points = 10;
cgtu_Iterations = 5;
cgtu_UseAvg = 0;
CGTU_Init_DMM(12)
CGTU_VerifyVGate();

CGTU_CalibrateVGate();


